/// Represents a chat message within an event.
///
/// This model mirrors the structure of the `event_chats` table in the Supabase database.
/// It includes the message content, sender information, and timestamp.
class ChatMessage {
  /// The unique identifier for the chat message (BIGSERIAL from the database).
  final int id;

  /// The unique identifier (UUID) of the event this message belongs to.
  final String eventId;

  /// The unique identifier (UUID) of the user who sent this message.
  /// This can be null if the user account was deleted and `ON DELETE SET NULL` is configured.
  final String? userId;

  /// The content of the chat message.
  final String message;

  /// The timestamp when the message was created.
  final DateTime createdAt;

  /// Constructs a [ChatMessage] instance.
  ChatMessage({
    required this.id,
    required this.eventId,
    this.userId, // userId can be null if the user is deleted
    required this.message,
    required this.createdAt,
  });

  /// Creates a [ChatMessage] instance from a JSON map.
  ///
  /// This factory constructor is typically used to parse data received from Supabase.
  /// It expects `created_at` to be an ISO 8601 string representation, which is then
  /// parsed into a [DateTime] object (converted to local time).
  factory ChatMessage.fromJson(Map<String, dynamic> json) {
    return ChatMessage(
      id: json['id'] as int,
      eventId: json['event_id'] as String,
      userId: json['user_id'] as String?, // User ID can be null
      message: json['message'] as String,
      createdAt: DateTime.parse(json['created_at'] as String).toLocal(),
    );
  }

  /// Converts this [ChatMessage] instance into a JSON map.
  ///
  /// This method is typically used when sending new message data to Supabase.
  /// The `id` and `createdAt` fields are usually generated by the database and
  /// are not included in the JSON output for creation.
  Map<String, dynamic> toJson() {
    return {
      'event_id': eventId,
      'user_id': userId, // Should be set to the current authenticated user's ID on creation
      'message': message,
      // 'created_at' is set by DB (DEFAULT NOW())
      // 'id' is set by DB (BIGSERIAL)
    };
  }

  /// Returns a string representation of the [ChatMessage] instance.
  /// Useful for debugging and logging.
  @override
  String toString() {
    return 'ChatMessage(id: $id, eventId: $eventId, userId: $userId, message: "$message", createdAt: $createdAt)';
  }

  /// Implements equality comparison for [ChatMessage] instances.
  /// Two messages are considered equal if their [id]s are the same.
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ChatMessage && other.id == id;
  }

  /// Returns the hash code for this [ChatMessage] instance, based on its [id].
  @override
  int get hashCode => id.hashCode;
}
