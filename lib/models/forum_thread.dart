/// Represents a forum thread within an event's discussion forum.
///
/// This model mirrors the structure of the `event_forum_threads` table in the Supabase database.
/// It includes the thread's title, content, author information, and timestamps.
class ForumThread {
  /// The unique identifier for the forum thread (BIGSERIAL from the database).
  final int id;

  /// The unique identifier (UUID) of the event this thread belongs to.
  final String eventId;

  /// The unique identifier (UUID) of the user who created this thread.
  /// This can be null if the user account was deleted and `ON DELETE SET NULL` is configured.
  final String? userId;

  /// The title of the forum thread.
  final String title;

  /// The main content of the forum thread's initial post. Optional.
  final String? content;

  /// The timestamp when the thread was created.
  final DateTime createdAt;

  /// The timestamp when the thread was last updated (e.g., new reply or edit).
  final DateTime updatedAt;

  /// Constructs a [ForumThread] instance.
  ForumThread({
    required this.id,
    required this.eventId,
    this.userId,
    required this.title,
    this.content,
    required this.createdAt,
    required this.updatedAt,
  });

  /// Creates a [ForumThread] instance from a JSON map.
  ///
  /// This factory constructor is typically used to parse data received from Supabase.
  /// It expects `created_at` and `updated_at` to be ISO 8601 string representations,
  /// which are then parsed into [DateTime] objects (converted to local time).
  factory ForumThread.fromJson(Map<String, dynamic> json) {
    return ForumThread(
      id: json['id'] as int,
      eventId: json['event_id'] as String,
      userId: json['user_id'] as String?, // User ID can be null
      title: json['title'] as String,
      content: json['content'] as String?,
      createdAt: DateTime.parse(json['created_at'] as String).toLocal(),
      updatedAt: DateTime.parse(json['updated_at'] as String).toLocal(),
    );
  }

  /// Converts this [ForumThread] instance into a JSON map.
  ///
  /// This method is typically used when sending new thread data to Supabase.
  /// Fields like `id`, `createdAt`, and `updatedAt` are usually generated by the database
  /// and are not included in the JSON output for creation.
  Map<String, dynamic> toJson() {
    return {
      'event_id': eventId,
      'user_id': userId, // Should be set to the current authenticated user's ID on creation
      'title': title,
      'content': content,
      // 'id', 'created_at', 'updated_at' are set by DB.
    };
  }

  /// Returns a string representation of the [ForumThread] instance.
  /// Useful for debugging and logging.
  @override
  String toString() {
    return 'ForumThread(id: $id, eventId: $eventId, title: "$title", userId: $userId, updatedAt: $updatedAt)';
  }

  /// Implements equality comparison for [ForumThread] instances.
  /// Two threads are considered equal if their [id]s are the same.
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ForumThread && other.id == id;
  }

  /// Returns the hash code for this [ForumThread] instance, based on its [id].
  @override
  int get hashCode => id.hashCode;
}
